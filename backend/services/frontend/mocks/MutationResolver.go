// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "frontend/graph/model"
)

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: ctx, input
func (_m *MutationResolver) CreateTodo(ctx context.Context, input model.INewTodo) (*model.Todo, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Todo
	if rf, ok := ret.Get(0).(func(context.Context, model.INewTodo) *model.Todo); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.INewTodo) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, input
func (_m *MutationResolver) Login(ctx context.Context, input model.ILogin) (*model.RLogin, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.RLogin
	if rf, ok := ret.Get(0).(func(context.Context, model.ILogin) *model.RLogin); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RLogin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ILogin) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx
func (_m *MutationResolver) Logout(ctx context.Context) (*model.RNone, error) {
	ret := _m.Called(ctx)

	var r0 *model.RNone
	if rf, ok := ret.Get(0).(func(context.Context) *model.RNone); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RNone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: ctx, input
func (_m *MutationResolver) Signup(ctx context.Context, input model.ISignup) (*model.RSignup, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.RSignup
	if rf, ok := ret.Get(0).(func(context.Context, model.ISignup) *model.RSignup); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RSignup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ISignup) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
